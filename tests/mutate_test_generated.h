// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MUTATETEST_TEST_H_
#define FLATBUFFERS_GENERATED_MUTATETEST_TEST_H_

#include "flatbuffers/flatbuffers.h"


namespace test {

struct Boo;
struct Foo;
struct Bar;
struct Baz;

enum class Size : int8_t {
  XS = 0,
  SMALL = 1,
  MEDIUM = 2,
  LARGE = 3,
  EXTRA_LARGE = 4
};

inline const char **EnumNamesSize() {
  static const char *names[] = { "XS", "SMALL", "MEDIUM", "LARGE", "EXTRA_LARGE", nullptr };
  return names;
}

inline const char *EnumNameSize(Size e) { return EnumNamesSize()[static_cast<int>(e)]; }

MANUALLY_ALIGNED_STRUCT(4) Boo FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int16_t y_;
  int8_t z_;
  int8_t __padding0;

 public:
  Boo(int32_t _x, int16_t _y, Size _z)
    : x_(flatbuffers::EndianScalar(_x)), y_(flatbuffers::EndianScalar(_y)), z_(flatbuffers::EndianScalar(static_cast<int8_t>(_z))), __padding0(0) { (void)__padding0; }

  int32_t x() const { return flatbuffers::EndianScalar(x_); }
  void mutate_x(int32_t _x) { flatbuffers::WriteScalar(&x_, _x); }
  int16_t y() const { return flatbuffers::EndianScalar(y_); }
  void mutate_y(int16_t _y) { flatbuffers::WriteScalar(&y_, _y); }
  Size z() const { return static_cast<Size>(flatbuffers::EndianScalar(z_)); }
  void mutate_z(Size _z) { flatbuffers::WriteScalar(&z_, static_cast<int8_t>(_z)); }
};
STRUCT_END(Boo, 8);

MANUALLY_ALIGNED_STRUCT(8) Baz FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t some_bool_;
  int8_t some_byte_;
  uint8_t some_ubyte_;
  int8_t __padding0;
  int16_t some_short_;
  uint16_t some_ushort_;
  int32_t some_int_;
  uint32_t some_uint_;
  int64_t some_long_;
  uint64_t some_ulong_;
  float some_float_;
  int32_t __padding1;
  double some_double_;
  int8_t some_size_;
  int8_t __padding2;
  int16_t __padding3;
  Boo some_boo_;
  int32_t __padding4;

 public:
  Baz(bool _some_bool, int8_t _some_byte, uint8_t _some_ubyte, int16_t _some_short, uint16_t _some_ushort, int32_t _some_int, uint32_t _some_uint, int64_t _some_long, uint64_t _some_ulong, float _some_float, double _some_double, Size _some_size, const Boo &_some_boo)
    : some_bool_(flatbuffers::EndianScalar(static_cast<uint8_t>(_some_bool))), some_byte_(flatbuffers::EndianScalar(_some_byte)), some_ubyte_(flatbuffers::EndianScalar(_some_ubyte)), __padding0(0), some_short_(flatbuffers::EndianScalar(_some_short)), some_ushort_(flatbuffers::EndianScalar(_some_ushort)), some_int_(flatbuffers::EndianScalar(_some_int)), some_uint_(flatbuffers::EndianScalar(_some_uint)), some_long_(flatbuffers::EndianScalar(_some_long)), some_ulong_(flatbuffers::EndianScalar(_some_ulong)), some_float_(flatbuffers::EndianScalar(_some_float)), __padding1(0), some_double_(flatbuffers::EndianScalar(_some_double)), some_size_(flatbuffers::EndianScalar(static_cast<int8_t>(_some_size))), __padding2(0), __padding3(0), some_boo_(_some_boo), __padding4(0) { (void)__padding0; (void)__padding1; (void)__padding2; (void)__padding3; (void)__padding4; }

  bool some_bool() const { return flatbuffers::EndianScalar(some_bool_) != 0; }
  void mutate_some_bool(bool _some_bool) { flatbuffers::WriteScalar(&some_bool_, static_cast<uint8_t>(_some_bool)); }
  int8_t some_byte() const { return flatbuffers::EndianScalar(some_byte_); }
  void mutate_some_byte(int8_t _some_byte) { flatbuffers::WriteScalar(&some_byte_, _some_byte); }
  uint8_t some_ubyte() const { return flatbuffers::EndianScalar(some_ubyte_); }
  void mutate_some_ubyte(uint8_t _some_ubyte) { flatbuffers::WriteScalar(&some_ubyte_, _some_ubyte); }
  int16_t some_short() const { return flatbuffers::EndianScalar(some_short_); }
  void mutate_some_short(int16_t _some_short) { flatbuffers::WriteScalar(&some_short_, _some_short); }
  uint16_t some_ushort() const { return flatbuffers::EndianScalar(some_ushort_); }
  void mutate_some_ushort(uint16_t _some_ushort) { flatbuffers::WriteScalar(&some_ushort_, _some_ushort); }
  int32_t some_int() const { return flatbuffers::EndianScalar(some_int_); }
  void mutate_some_int(int32_t _some_int) { flatbuffers::WriteScalar(&some_int_, _some_int); }
  uint32_t some_uint() const { return flatbuffers::EndianScalar(some_uint_); }
  void mutate_some_uint(uint32_t _some_uint) { flatbuffers::WriteScalar(&some_uint_, _some_uint); }
  int64_t some_long() const { return flatbuffers::EndianScalar(some_long_); }
  void mutate_some_long(int64_t _some_long) { flatbuffers::WriteScalar(&some_long_, _some_long); }
  uint64_t some_ulong() const { return flatbuffers::EndianScalar(some_ulong_); }
  void mutate_some_ulong(uint64_t _some_ulong) { flatbuffers::WriteScalar(&some_ulong_, _some_ulong); }
  float some_float() const { return flatbuffers::EndianScalar(some_float_); }
  void mutate_some_float(float _some_float) { flatbuffers::WriteScalar(&some_float_, _some_float); }
  double some_double() const { return flatbuffers::EndianScalar(some_double_); }
  void mutate_some_double(double _some_double) { flatbuffers::WriteScalar(&some_double_, _some_double); }
  Size some_size() const { return static_cast<Size>(flatbuffers::EndianScalar(some_size_)); }
  void mutate_some_size(Size _some_size) { flatbuffers::WriteScalar(&some_size_, static_cast<int8_t>(_some_size)); }
  const Boo &some_boo() const { return some_boo_; }
  Boo &mutable_some_boo() { return some_boo_; }
};
STRUCT_END(Baz, 64);

struct Foo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SOME_BOOL = 4,
    VT_SOME_BYTE = 6,
    VT_SOME_UBYTE = 8,
    VT_SOME_SHORT = 10,
    VT_SOME_USHORT = 12,
    VT_SOME_INT = 14,
    VT_SOME_UINT = 16,
    VT_SOME_LONG = 18,
    VT_SOME_ULONG = 20,
    VT_SOME_FLOAT = 22,
    VT_SOME_DOUBLE = 24,
    VT_SOME_STRING = 26,
    VT_SOME_BYTES = 28,
    VT_SOME_BAZ = 30,
    VT_SOME_SIZE = 32,
    VT_SOME_BAR = 34,
  };
  bool some_bool() const { return GetField<uint8_t>(VT_SOME_BOOL, 0) != 0; }
  bool mutate_some_bool(bool _some_bool) { return SetField(VT_SOME_BOOL, static_cast<uint8_t>(_some_bool)); }
  int8_t some_byte() const { return GetField<int8_t>(VT_SOME_BYTE, 0); }
  bool mutate_some_byte(int8_t _some_byte) { return SetField(VT_SOME_BYTE, _some_byte); }
  uint8_t some_ubyte() const { return GetField<uint8_t>(VT_SOME_UBYTE, 0); }
  bool mutate_some_ubyte(uint8_t _some_ubyte) { return SetField(VT_SOME_UBYTE, _some_ubyte); }
  int16_t some_short() const { return GetField<int16_t>(VT_SOME_SHORT, 0); }
  bool mutate_some_short(int16_t _some_short) { return SetField(VT_SOME_SHORT, _some_short); }
  uint16_t some_ushort() const { return GetField<uint16_t>(VT_SOME_USHORT, 0); }
  bool mutate_some_ushort(uint16_t _some_ushort) { return SetField(VT_SOME_USHORT, _some_ushort); }
  int32_t some_int() const { return GetField<int32_t>(VT_SOME_INT, 0); }
  bool mutate_some_int(int32_t _some_int) { return SetField(VT_SOME_INT, _some_int); }
  uint32_t some_uint() const { return GetField<uint32_t>(VT_SOME_UINT, 0); }
  bool mutate_some_uint(uint32_t _some_uint) { return SetField(VT_SOME_UINT, _some_uint); }
  int64_t some_long() const { return GetField<int64_t>(VT_SOME_LONG, 0); }
  bool mutate_some_long(int64_t _some_long) { return SetField(VT_SOME_LONG, _some_long); }
  uint64_t some_ulong() const { return GetField<uint64_t>(VT_SOME_ULONG, 0); }
  bool mutate_some_ulong(uint64_t _some_ulong) { return SetField(VT_SOME_ULONG, _some_ulong); }
  float some_float() const { return GetField<float>(VT_SOME_FLOAT, 0); }
  bool mutate_some_float(float _some_float) { return SetField(VT_SOME_FLOAT, _some_float); }
  double some_double() const { return GetField<double>(VT_SOME_DOUBLE, 0); }
  bool mutate_some_double(double _some_double) { return SetField(VT_SOME_DOUBLE, _some_double); }
  const flatbuffers::String *some_string() const { return GetPointer<const flatbuffers::String *>(VT_SOME_STRING); }
  flatbuffers::String *mutable_some_string() { return GetPointer<flatbuffers::String *>(VT_SOME_STRING); }
  const flatbuffers::String *some_bytes() const { return GetPointer<const flatbuffers::String *>(VT_SOME_BYTES); }
  flatbuffers::String *mutable_some_bytes() { return GetPointer<flatbuffers::String *>(VT_SOME_BYTES); }
  const Baz *some_baz() const { return GetStruct<const Baz *>(VT_SOME_BAZ); }
  Baz *mutable_some_baz() { return GetStruct<Baz *>(VT_SOME_BAZ); }
  Size some_size() const { return static_cast<Size>(GetField<int8_t>(VT_SOME_SIZE, 0)); }
  bool mutate_some_size(Size _some_size) { return SetField(VT_SOME_SIZE, static_cast<int8_t>(_some_size)); }
  const Bar *some_bar() const { return GetPointer<const Bar *>(VT_SOME_BAR); }
  Bar *mutable_some_bar() { return GetPointer<Bar *>(VT_SOME_BAR); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SOME_BOOL) &&
           VerifyField<int8_t>(verifier, VT_SOME_BYTE) &&
           VerifyField<uint8_t>(verifier, VT_SOME_UBYTE) &&
           VerifyField<int16_t>(verifier, VT_SOME_SHORT) &&
           VerifyField<uint16_t>(verifier, VT_SOME_USHORT) &&
           VerifyField<int32_t>(verifier, VT_SOME_INT) &&
           VerifyField<uint32_t>(verifier, VT_SOME_UINT) &&
           VerifyField<int64_t>(verifier, VT_SOME_LONG) &&
           VerifyField<uint64_t>(verifier, VT_SOME_ULONG) &&
           VerifyField<float>(verifier, VT_SOME_FLOAT) &&
           VerifyField<double>(verifier, VT_SOME_DOUBLE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SOME_STRING) &&
           verifier.Verify(some_string()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SOME_BYTES) &&
           verifier.Verify(some_bytes()) &&
           VerifyField<Baz>(verifier, VT_SOME_BAZ) &&
           VerifyField<int8_t>(verifier, VT_SOME_SIZE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SOME_BAR) &&
           verifier.VerifyTable(some_bar()) &&
           verifier.EndTable();
  }
};

struct FooBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_some_bool(bool some_bool) { fbb_.AddElement<uint8_t>(Foo::VT_SOME_BOOL, static_cast<uint8_t>(some_bool), 0); }
  void add_some_byte(int8_t some_byte) { fbb_.AddElement<int8_t>(Foo::VT_SOME_BYTE, some_byte, 0); }
  void add_some_ubyte(uint8_t some_ubyte) { fbb_.AddElement<uint8_t>(Foo::VT_SOME_UBYTE, some_ubyte, 0); }
  void add_some_short(int16_t some_short) { fbb_.AddElement<int16_t>(Foo::VT_SOME_SHORT, some_short, 0); }
  void add_some_ushort(uint16_t some_ushort) { fbb_.AddElement<uint16_t>(Foo::VT_SOME_USHORT, some_ushort, 0); }
  void add_some_int(int32_t some_int) { fbb_.AddElement<int32_t>(Foo::VT_SOME_INT, some_int, 0); }
  void add_some_uint(uint32_t some_uint) { fbb_.AddElement<uint32_t>(Foo::VT_SOME_UINT, some_uint, 0); }
  void add_some_long(int64_t some_long) { fbb_.AddElement<int64_t>(Foo::VT_SOME_LONG, some_long, 0); }
  void add_some_ulong(uint64_t some_ulong) { fbb_.AddElement<uint64_t>(Foo::VT_SOME_ULONG, some_ulong, 0); }
  void add_some_float(float some_float) { fbb_.AddElement<float>(Foo::VT_SOME_FLOAT, some_float, 0); }
  void add_some_double(double some_double) { fbb_.AddElement<double>(Foo::VT_SOME_DOUBLE, some_double, 0); }
  void add_some_string(flatbuffers::Offset<flatbuffers::String> some_string) { fbb_.AddOffset(Foo::VT_SOME_STRING, some_string); }
  void add_some_bytes(flatbuffers::Offset<flatbuffers::String> some_bytes) { fbb_.AddOffset(Foo::VT_SOME_BYTES, some_bytes); }
  void add_some_baz(const Baz *some_baz) { fbb_.AddStruct(Foo::VT_SOME_BAZ, some_baz); }
  void add_some_size(Size some_size) { fbb_.AddElement<int8_t>(Foo::VT_SOME_SIZE, static_cast<int8_t>(some_size), 0); }
  void add_some_bar(flatbuffers::Offset<Bar> some_bar) { fbb_.AddOffset(Foo::VT_SOME_BAR, some_bar); }
  FooBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FooBuilder &operator=(const FooBuilder &);
  flatbuffers::Offset<Foo> Finish() {
    auto o = flatbuffers::Offset<Foo>(fbb_.EndTable(start_, 16));
    return o;
  }
};

inline flatbuffers::Offset<Foo> CreateFoo(flatbuffers::FlatBufferBuilder &_fbb,
   bool some_bool = false,
   int8_t some_byte = 0,
   uint8_t some_ubyte = 0,
   int16_t some_short = 0,
   uint16_t some_ushort = 0,
   int32_t some_int = 0,
   uint32_t some_uint = 0,
   int64_t some_long = 0,
   uint64_t some_ulong = 0,
   float some_float = 0,
   double some_double = 0,
   flatbuffers::Offset<flatbuffers::String> some_string = 0,
   flatbuffers::Offset<flatbuffers::String> some_bytes = 0,
   const Baz *some_baz = 0,
   Size some_size = Size::XS,
   flatbuffers::Offset<Bar> some_bar = 0) {
  FooBuilder builder_(_fbb);
  builder_.add_some_double(some_double);
  builder_.add_some_ulong(some_ulong);
  builder_.add_some_long(some_long);
  builder_.add_some_bar(some_bar);
  builder_.add_some_baz(some_baz);
  builder_.add_some_bytes(some_bytes);
  builder_.add_some_string(some_string);
  builder_.add_some_float(some_float);
  builder_.add_some_uint(some_uint);
  builder_.add_some_int(some_int);
  builder_.add_some_ushort(some_ushort);
  builder_.add_some_short(some_short);
  builder_.add_some_size(some_size);
  builder_.add_some_ubyte(some_ubyte);
  builder_.add_some_byte(some_byte);
  builder_.add_some_bool(some_bool);
  return builder_.Finish();
}

struct Bar FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SOME_BOOL = 4,
    VT_SOME_BYTE = 6,
    VT_SOME_UBYTE = 8,
    VT_SOME_SHORT = 10,
    VT_SOME_USHORT = 12,
    VT_SOME_INT = 14,
    VT_SOME_UINT = 16,
    VT_SOME_LONG = 18,
    VT_SOME_ULONG = 20,
    VT_SOME_FLOAT = 22,
    VT_SOME_DOUBLE = 24,
    VT_SOME_STRING = 26,
    VT_SOME_BYTES = 28,
    VT_SOME_BAZ = 30,
    VT_SOME_SIZE = 32,
  };
  bool some_bool() const { return GetField<uint8_t>(VT_SOME_BOOL, 0) != 0; }
  bool mutate_some_bool(bool _some_bool) { return SetField(VT_SOME_BOOL, static_cast<uint8_t>(_some_bool)); }
  int8_t some_byte() const { return GetField<int8_t>(VT_SOME_BYTE, 0); }
  bool mutate_some_byte(int8_t _some_byte) { return SetField(VT_SOME_BYTE, _some_byte); }
  uint8_t some_ubyte() const { return GetField<uint8_t>(VT_SOME_UBYTE, 0); }
  bool mutate_some_ubyte(uint8_t _some_ubyte) { return SetField(VT_SOME_UBYTE, _some_ubyte); }
  int16_t some_short() const { return GetField<int16_t>(VT_SOME_SHORT, 0); }
  bool mutate_some_short(int16_t _some_short) { return SetField(VT_SOME_SHORT, _some_short); }
  uint16_t some_ushort() const { return GetField<uint16_t>(VT_SOME_USHORT, 0); }
  bool mutate_some_ushort(uint16_t _some_ushort) { return SetField(VT_SOME_USHORT, _some_ushort); }
  int32_t some_int() const { return GetField<int32_t>(VT_SOME_INT, 0); }
  bool mutate_some_int(int32_t _some_int) { return SetField(VT_SOME_INT, _some_int); }
  uint32_t some_uint() const { return GetField<uint32_t>(VT_SOME_UINT, 0); }
  bool mutate_some_uint(uint32_t _some_uint) { return SetField(VT_SOME_UINT, _some_uint); }
  int64_t some_long() const { return GetField<int64_t>(VT_SOME_LONG, 0); }
  bool mutate_some_long(int64_t _some_long) { return SetField(VT_SOME_LONG, _some_long); }
  uint64_t some_ulong() const { return GetField<uint64_t>(VT_SOME_ULONG, 0); }
  bool mutate_some_ulong(uint64_t _some_ulong) { return SetField(VT_SOME_ULONG, _some_ulong); }
  float some_float() const { return GetField<float>(VT_SOME_FLOAT, 0); }
  bool mutate_some_float(float _some_float) { return SetField(VT_SOME_FLOAT, _some_float); }
  double some_double() const { return GetField<double>(VT_SOME_DOUBLE, 0); }
  bool mutate_some_double(double _some_double) { return SetField(VT_SOME_DOUBLE, _some_double); }
  const flatbuffers::String *some_string() const { return GetPointer<const flatbuffers::String *>(VT_SOME_STRING); }
  flatbuffers::String *mutable_some_string() { return GetPointer<flatbuffers::String *>(VT_SOME_STRING); }
  const flatbuffers::String *some_bytes() const { return GetPointer<const flatbuffers::String *>(VT_SOME_BYTES); }
  flatbuffers::String *mutable_some_bytes() { return GetPointer<flatbuffers::String *>(VT_SOME_BYTES); }
  const Baz *some_baz() const { return GetStruct<const Baz *>(VT_SOME_BAZ); }
  Baz *mutable_some_baz() { return GetStruct<Baz *>(VT_SOME_BAZ); }
  Size some_size() const { return static_cast<Size>(GetField<int8_t>(VT_SOME_SIZE, 0)); }
  bool mutate_some_size(Size _some_size) { return SetField(VT_SOME_SIZE, static_cast<int8_t>(_some_size)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_SOME_BOOL) &&
           VerifyField<int8_t>(verifier, VT_SOME_BYTE) &&
           VerifyField<uint8_t>(verifier, VT_SOME_UBYTE) &&
           VerifyField<int16_t>(verifier, VT_SOME_SHORT) &&
           VerifyField<uint16_t>(verifier, VT_SOME_USHORT) &&
           VerifyField<int32_t>(verifier, VT_SOME_INT) &&
           VerifyField<uint32_t>(verifier, VT_SOME_UINT) &&
           VerifyField<int64_t>(verifier, VT_SOME_LONG) &&
           VerifyField<uint64_t>(verifier, VT_SOME_ULONG) &&
           VerifyField<float>(verifier, VT_SOME_FLOAT) &&
           VerifyField<double>(verifier, VT_SOME_DOUBLE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SOME_STRING) &&
           verifier.Verify(some_string()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SOME_BYTES) &&
           verifier.Verify(some_bytes()) &&
           VerifyField<Baz>(verifier, VT_SOME_BAZ) &&
           VerifyField<int8_t>(verifier, VT_SOME_SIZE) &&
           verifier.EndTable();
  }
};

struct BarBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_some_bool(bool some_bool) { fbb_.AddElement<uint8_t>(Bar::VT_SOME_BOOL, static_cast<uint8_t>(some_bool), 0); }
  void add_some_byte(int8_t some_byte) { fbb_.AddElement<int8_t>(Bar::VT_SOME_BYTE, some_byte, 0); }
  void add_some_ubyte(uint8_t some_ubyte) { fbb_.AddElement<uint8_t>(Bar::VT_SOME_UBYTE, some_ubyte, 0); }
  void add_some_short(int16_t some_short) { fbb_.AddElement<int16_t>(Bar::VT_SOME_SHORT, some_short, 0); }
  void add_some_ushort(uint16_t some_ushort) { fbb_.AddElement<uint16_t>(Bar::VT_SOME_USHORT, some_ushort, 0); }
  void add_some_int(int32_t some_int) { fbb_.AddElement<int32_t>(Bar::VT_SOME_INT, some_int, 0); }
  void add_some_uint(uint32_t some_uint) { fbb_.AddElement<uint32_t>(Bar::VT_SOME_UINT, some_uint, 0); }
  void add_some_long(int64_t some_long) { fbb_.AddElement<int64_t>(Bar::VT_SOME_LONG, some_long, 0); }
  void add_some_ulong(uint64_t some_ulong) { fbb_.AddElement<uint64_t>(Bar::VT_SOME_ULONG, some_ulong, 0); }
  void add_some_float(float some_float) { fbb_.AddElement<float>(Bar::VT_SOME_FLOAT, some_float, 0); }
  void add_some_double(double some_double) { fbb_.AddElement<double>(Bar::VT_SOME_DOUBLE, some_double, 0); }
  void add_some_string(flatbuffers::Offset<flatbuffers::String> some_string) { fbb_.AddOffset(Bar::VT_SOME_STRING, some_string); }
  void add_some_bytes(flatbuffers::Offset<flatbuffers::String> some_bytes) { fbb_.AddOffset(Bar::VT_SOME_BYTES, some_bytes); }
  void add_some_baz(const Baz *some_baz) { fbb_.AddStruct(Bar::VT_SOME_BAZ, some_baz); }
  void add_some_size(Size some_size) { fbb_.AddElement<int8_t>(Bar::VT_SOME_SIZE, static_cast<int8_t>(some_size), 0); }
  BarBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BarBuilder &operator=(const BarBuilder &);
  flatbuffers::Offset<Bar> Finish() {
    auto o = flatbuffers::Offset<Bar>(fbb_.EndTable(start_, 15));
    return o;
  }
};

inline flatbuffers::Offset<Bar> CreateBar(flatbuffers::FlatBufferBuilder &_fbb,
   bool some_bool = false,
   int8_t some_byte = 0,
   uint8_t some_ubyte = 0,
   int16_t some_short = 0,
   uint16_t some_ushort = 0,
   int32_t some_int = 0,
   uint32_t some_uint = 0,
   int64_t some_long = 0,
   uint64_t some_ulong = 0,
   float some_float = 0,
   double some_double = 0,
   flatbuffers::Offset<flatbuffers::String> some_string = 0,
   flatbuffers::Offset<flatbuffers::String> some_bytes = 0,
   const Baz *some_baz = 0,
   Size some_size = Size::XS) {
  BarBuilder builder_(_fbb);
  builder_.add_some_double(some_double);
  builder_.add_some_ulong(some_ulong);
  builder_.add_some_long(some_long);
  builder_.add_some_baz(some_baz);
  builder_.add_some_bytes(some_bytes);
  builder_.add_some_string(some_string);
  builder_.add_some_float(some_float);
  builder_.add_some_uint(some_uint);
  builder_.add_some_int(some_int);
  builder_.add_some_ushort(some_ushort);
  builder_.add_some_short(some_short);
  builder_.add_some_size(some_size);
  builder_.add_some_ubyte(some_ubyte);
  builder_.add_some_byte(some_byte);
  builder_.add_some_bool(some_bool);
  return builder_.Finish();
}

}  // namespace test

#endif  // FLATBUFFERS_GENERATED_MUTATETEST_TEST_H_
